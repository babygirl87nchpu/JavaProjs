package edu.vt.cs5044;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

/**
 * 
 * This class has private instances, helpers, and public methods for DotsAndBoxes project
 * implementation
 *
 * @author SamIAm
 * @version Mar 16, 2023
 *
 */
public class DABGame implements DotsAndBoxes {

    private Player currentPlayer;
    private int size;
    private Map<Coordinate, Box> boxGrid;
    private boolean gridInitialized;

    /**
     * Construct a new DABGame object.
     *
     */
    public DABGame() {
        currentPlayer = null;
        size = -1;
        boxGrid = null;
        gridInitialized = false;

    }

    @Override
    public boolean drawEdge(Coordinate coord, Direction dir) {

        validateGridInitialized();
        Box box = fetchBox(coord);

        // draw an edge to that box in the current direction -->box.drawEdge(dir, currentPlayer);
        box.drawEdge(dir, currentPlayer);
        // drawEdge checks to see if the box is completed so we switch players
        currentPlayer = currentPlayer.getOpponent();

        // check if this edge completes a box (check for box and one of the neighbor boxes)
        // if no box is complete --> change turn
//        try {
//            fetchBox(coord.getNeighbor(dir));
//            box.drawEdge(dir.getOpposite(), currentPlayer);
//            if (!box.isBoxCompleted()) {
//                currentPlayer = currentPlayer.getOpponent();
//            }
//        }
//        catch (GameException ge) {
//            // expected empty catch block; no action needed
//        }
//
//        return true;
//
////        boolean boxCompleted = false;
////        boolean neighborCompleted = false;
////        if (box.hasEdge(dir)) {
////            return false;
////        }
////        box.addEdge(dir, currentPlayer);
////        if (box.getOwner() !=  null) {
////            boxCompleted = true;
////        }
////        try {
////            Box neighbor = fetchBox(coord.getNeighbor(dir));
////            neighbor.addEdge(dir.getOpposite(), currentPlayer);
////            if (neighbor.getOwner() != null) {
////                neighborCompleted = true;
////            }
////        } catch (GameException ge) {
////            // do nothing; we just needed to skip this section if there's no neighbor
////        }
////        if (!boxCompleted && !neighborCompleted) {
////            currentPlayer = currentPlayer.getOpponent();
////        }
////        return true;
        return false;
    }

    /**
     * 
     * This checks to see if the game is over with adding scores.
     *
     * @return true/false
     */
//    private boolean isGameOver() {
//        Map<Player, Integer> scoreMap = getScores();
//        int totalScore = scoreMap.get(Player.ONE) + scoreMap.get(Player.TWO);
//        return totalScore == size * size;
//    }

    @Override
    public Player getCurrentPlayer() {
        validateGridInitialized();

        Map<Player, Integer> scoreSheetMap = getScores();
        int sum = 0;
        for (int score : scoreSheetMap.values()) {
            sum += score;
        }
        return currentPlayer;
    }

    //
    @Override
    public Collection<Direction> getDrawnEdgesAt(Coordinate coord) {
        validateGridInitialized();
        return fetchBox(coord).getDrawnEgdes();
    }

    @Override
    public Player getOwnerAt(Coordinate coord) {
        validateGridInitialized();
        Box box = fetchBox(coord);
        return box.getOwner();
    }

    /**
     *
     * 
     * 
     * Gets the box at the coordinate that is passed in
     *
     * @param coord coordinate for that box
     * @return box
     */
    private Box fetchBox(Coordinate coord) {
        validateGridInitialized();
        if (!boxGrid.containsKey(coord)) {
            throw new GameException("Invalid coordinate");
        }
        return boxGrid.get(coord);
    }

    /**
     *
     *
     *
     *
     * Checking to see if grid is initialized
     */
    private void validateGridInitialized() {
        if (!gridInitialized) {
            throw new GameException("Grid is not initilized");
        }
    }

    @Override
    public Map<Player, Integer> getScores() {
        validateGridInitialized();
        int p1 = 0;
        int p2 = 0;
        for (Coordinate coord : boxGrid.keySet()) {
            Box box = boxGrid.get(coord);
            Player owner = box.getOwner();
            if (owner == Player.ONE) {
                p1++;
            }
            if (owner == Player.TWO) {
                p2++;
            }
        }
        Map<Player, Integer> scores = new HashMap<Player, Integer>();
        scores.put(Player.ONE, p1);
        scores.put(Player.TWO, p2);
        return scores;
    }

    //
    @Override
    public int getSize() {
        validateGridInitialized();
        return size;
    }

    //
    @Override
    public void init(int size) {
        if (size < 2) {
            throw new GameException("Size is less than 2");
        }

        this.size = size;
        currentPlayer = Player.ONE;

        boxGrid = new HashMap<>();

        for (int x = 0; x < size; x++) {
            for (int y = 0; y < size; y++) {
                boxGrid.put(new Coordinate(x, y), new Box());
            }
        }
        gridInitialized = true;
    }

}
