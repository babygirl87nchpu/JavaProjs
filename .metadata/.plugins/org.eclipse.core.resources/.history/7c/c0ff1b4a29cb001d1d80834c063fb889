package edu.vt.cs5044;

import static org.junit.Assert.*;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import org.junit.Before;
import org.junit.Test;

/**
 * Write a one-sentence summary of your class here. Follow it with additional details about its
 * purpose and how to use it.
 *
 * @author SamIAm
 * @version Mar 22, 2023
 *
 */
public class DABGameTest {

    private DotsAndBoxes game;

    @Before
    public void DABGame() {
        game = new DABGame();
    }

    /**
     * Initialize test grid with valid size
     */
    @Test
    public void testIntGame() {

        game.init(3);
        assertEquals(Player.ONE, game.getCurrentPlayer());
        assertEquals(3, game.getSize());

    }

    /**
     * Testing method scores before initializing grid
     */
    @Test(expected = GameException.class)
    public void testCallBeforeIntGame() {
        try {
            game.getScores();
            fail("No exception thrown for not calling initilize method before getScores()");
        }
        catch (GameException ge) {
            assertEquals(null, ge.getMessage());
        }
    }

//    /**
//     * Initialize test grid with invalid size
//     */
//    @Test(expected = GameException.class)
//    public void testIntSizeInvalid1() {
//        game.init(1);
//    }

    /**
     * Initialize test grid with invalid size
     */
    @Test
    public void testIntSizeInvalid() {
        try {
            game.init(1);
            fail("No exception thrown for invalid int size of less than 2");
        }
        catch (GameException ge) {
            assertEquals(null, ge.getMessage());
        }
    }

    /**
     * Test the size of the box grid to be at least 2*2. It throws an exception if it fails.
     *
     */
    @Test
    public void testGetSizeTryCatch() {
        try {
            game.getSize();
            fail("getSize() did not throw expected Exception");
        }
        catch (GameException ge) {
            assertEquals(null, ge.getMessage());
        }
    }

    /**
     * Initialize the board and draw edge at the null direction and capture the exception.
     *
     */
    @Test(expected = GameException.class)
    public void testDrawEdgeDirectionNull() {
        game.init(2);
        assertNull(game.drawEdge(new Coordinate(0, 0), null));
    }

    /**
     * Test weather the box has an edge or not at a given direction.
     *
     */
    @Test
    public void testDrawEdges() {
        game.init(2);
        Set<Direction> expectedEdges = new HashSet<>();
        expectedEdges.add(Direction.BOTTOM);
        game.drawEdge(new Coordinate(0, 0), Direction.BOTTOM);
        assertEquals(expectedEdges, game.getDrawnEdgesAt(new Coordinate(0, 0)));
        assertEquals(Player.TWO, game.getCurrentPlayer());
    }

    /**
     * Test box before draw edges
     *
     */
    @Test
    public void testBeforeDrawEdges() {
        game.init(2);
        Set<Direction> emptyEdges = new HashSet<>();
        assertEquals(emptyEdges, game.getDrawnEdgesAt(new Coordinate(0, 0)));
        assertTrue(game.getDrawnEdgesAt(new Coordinate(0, 0)).isEmpty());
    }

    /**
     * Test weather the box has an edge
     **
     */
    @Test
    public void testIsBoxDrawnAtEdge() {
        game.init(2);
        Set<Direction> expectedEdge = new HashSet<>();
        assertEquals(expectedEdge, game.getDrawnEdgesAt(new Coordinate(0, 0)));
        assertTrue(game.getDrawnEdgesAt(new Coordinate(1, 0)).isEmpty());
    }

    /**
     * Test the first edge in the board.
     */
    @Test
    public void testDrawFirstEdge() {
        game.init(3);// action
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.RIGHT));
        assertFalse(game.drawEdge(new Coordinate(0, 0), Direction.RIGHT));// edge already drawn
        assertEquals(1, game.getDrawnEdgesAt(new Coordinate(0, 0)).size());
        assertTrue(game.getDrawnEdgesAt(new Coordinate(0, 0)).contains(Direction.RIGHT));
        assertEquals(1, game.getDrawnEdgesAt(new Coordinate(1, 0)).size());// size
        assertTrue(game.getDrawnEdgesAt(new Coordinate(1, 0)).contains(Direction.LEFT));
        assertTrue(game.getDrawnEdgesAt(new Coordinate(0, 0).getNeighbor(Direction.RIGHT))
            .contains(Direction.LEFT));
    }

    /**
     * Test the first edge and draw the same edge again at the same coordinate.
     */
    @Test
    public void testDrawFirstEdgeAgain() {
        game.init(2);
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.RIGHT));
        assertFalse(game.drawEdge(new Coordinate(0, 0), Direction.RIGHT));
        assertEquals(1, game.getDrawnEdgesAt(new Coordinate(0, 0)).size());
        assertTrue(game.getDrawnEdgesAt(new Coordinate(0, 0)).contains(Direction.RIGHT));
        assertEquals(1, game.getDrawnEdgesAt(new Coordinate(1, 0)).size());
        assertTrue(game.getDrawnEdgesAt(new Coordinate(1, 0)).contains(Direction.LEFT));
    }

    /**
     * Test completed first box of neighbor
     *
     */
    @Test
    public void testCompletedFirstBoxFromNeighbor() {
        game.init(2);
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.LEFT));// p1
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.BOTTOM));// p2
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.TOP));// p1
        assertEquals(Player.TWO, game.getCurrentPlayer());// p2
        assertTrue(game.drawEdge(new Coordinate(1, 0), Direction.LEFT));// p2
        assertEquals(4, game.getDrawnEdgesAt(new Coordinate(0, 0)).size());
        assertEquals(Player.TWO, game.getOwnerAt(new Coordinate(0, 0)));
    }

    /**
     * Test the first edge and draw the same edge again at the same coordinate but from the
     * neighbor. The neighbor of RIGHT of (0, 0) coordinate must be LEFT of coordinate (1, 0)
     */
    @Test
    public void testDrawFirstEdgeAgainFromNeighbor() {
        game.init(2);// action
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.RIGHT));
        assertFalse(game.drawEdge(new Coordinate(1, 0), Direction.LEFT));
        assertEquals(1, game.getDrawnEdgesAt(new Coordinate(0, 0)).size());
        assertTrue(game.getDrawnEdgesAt(new Coordinate(0, 0)).contains(Direction.RIGHT));
        assertEquals(1, game.getDrawnEdgesAt(new Coordinate(1, 0)).size());
        assertTrue(game.getDrawnEdgesAt(new Coordinate(1, 0)).contains(Direction.LEFT));
    }

    /**
     * Test the first completed box, this time it is completed from the neighbor box, and score is
     * noted.
     */
    @Test
    public void testCompletedFirstBoxFromNeighborGetScore() {
        game.init(2);// action
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.LEFT));// p1
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.BOTTOM));// p2
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.TOP));// p1
        assertEquals(Player.TWO, game.getCurrentPlayer());// p2
        assertTrue(game.drawEdge(new Coordinate(1, 0), Direction.LEFT));// p2
        assertEquals(4, game.getDrawnEdgesAt(new Coordinate(0, 0)).size());// size 4
        assertEquals(Player.TWO, game.getOwnerAt(new Coordinate(0, 0)));
        assertEquals(Player.TWO, game.getCurrentPlayer());
        Map<Player, Integer> scoreMap = game.getScores();
        assertEquals(0, (int) scoreMap.get(Player.ONE));
        assertEquals(1, (int) scoreMap.get(Player.TWO));
    }

    /**
     * Test draw a complete box from all directions.
     *
     */
    @Test
    public void testDrawCompleteBox() {
        game.init(2);

        Set<Direction> expectedEdges = new HashSet<>();
        expectedEdges.add(Direction.BOTTOM);
        expectedEdges.add(Direction.TOP);
        expectedEdges.add(Direction.LEFT);
        expectedEdges.add(Direction.RIGHT);

        game.drawEdge(new Coordinate(0, 0), Direction.BOTTOM);
        assertEquals(Player.TWO, game.getCurrentPlayer());
        game.drawEdge(new Coordinate(0, 0), Direction.TOP);
        assertEquals(Player.ONE, game.getCurrentPlayer());
        game.drawEdge(new Coordinate(0, 0), Direction.LEFT);
        assertEquals(Player.TWO, game.getCurrentPlayer());
        game.drawEdge(new Coordinate(0, 0), Direction.RIGHT);
        assertEquals(Player.TWO, game.getCurrentPlayer());
        assertEquals(Player.TWO, game.getOwnerAt(new Coordinate(0, 0)));

        assertEquals(expectedEdges, game.getDrawnEdgesAt(new Coordinate(0, 0)));
        // or
        assertEquals(4, game.getDrawnEdgesAt(new Coordinate(0, 0)).size());

    }

    /**
     * Test the full game engine at 2 by 2 grid size in total of four boxes. Observed the score and
     * noticed the winner.
     */
    @Test
    public void testScoreAtTwoByTwoGrid() {
        game.init(2);// action
        assertEquals(Player.ONE, game.getCurrentPlayer());
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.RIGHT));// p1
        assertEquals(Player.TWO, game.getCurrentPlayer());
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.LEFT));// p2
        assertEquals(Player.ONE, game.getCurrentPlayer());
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.TOP));// p1
        assertEquals(Player.TWO, game.getCurrentPlayer());
        assertTrue(game.drawEdge(new Coordinate(0, 0), Direction.BOTTOM));// p2
        assertEquals(4, game.getDrawnEdgesAt(new Coordinate(0, 0)).size());// 4
        assertEquals(Player.TWO, game.getOwnerAt(new Coordinate(0, 0)));// p2 owns it
        assertEquals(Player.TWO, game.getCurrentPlayer());// p2
        assertTrue(game.drawEdge(new Coordinate(1, 0), Direction.RIGHT));// p2
        assertEquals(Player.ONE, game.getCurrentPlayer());
        assertFalse(game.drawEdge(new Coordinate(1, 0), Direction.LEFT));// already drawn by
                                                                         // neighbor
        assertEquals(Player.ONE, game.getCurrentPlayer());
        assertTrue(game.drawEdge(new Coordinate(1, 0), Direction.TOP));// p1
        assertEquals(Player.TWO, game.getCurrentPlayer());
        assertTrue(game.drawEdge(new Coordinate(1, 0), Direction.BOTTOM));// p2
        assertEquals(4, game.getDrawnEdgesAt(new Coordinate(1, 0)).size());
        assertEquals(Player.TWO, game.getOwnerAt(new Coordinate(1, 0)));// p2 owns it
        assertEquals(Player.TWO, game.getCurrentPlayer());
        assertTrue(game.drawEdge(new Coordinate(0, 1), Direction.RIGHT));// p2
        assertEquals(Player.ONE, game.getCurrentPlayer());// p1
        assertTrue(game.drawEdge(new Coordinate(0, 1), Direction.BOTTOM));// p1
        assertEquals(Player.TWO, game.getCurrentPlayer());// p2
        assertTrue(game.drawEdge(new Coordinate(0, 1), Direction.LEFT));// p2
        assertEquals(Player.TWO, game.getOwnerAt(new Coordinate(0, 1)));// p2 owns it
        assertEquals(Player.TWO, game.getCurrentPlayer());// p2
        assertTrue(game.drawEdge(new Coordinate(1, 1), Direction.BOTTOM));// p2
        assertEquals(Player.ONE, game.getCurrentPlayer());// p1
        assertTrue(game.drawEdge(new Coordinate(1, 1), Direction.RIGHT));// p1
        assertEquals(Player.ONE, game.getOwnerAt(new Coordinate(1, 1)));// p1 owns it
        Map<Player, Integer> scoreMap = game.getScores();// action
        assertEquals(1, (int) scoreMap.get(Player.ONE));// score p1 = 1
        assertEquals(3, (int) scoreMap.get(Player.TWO));// score p2 = 3
    }
}
